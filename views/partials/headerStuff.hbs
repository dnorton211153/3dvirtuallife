<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">

<link id="favicon" rel="icon" href="/public/favicon.ico" type="image/x-icon">
<link rel="stylesheet" href="/public/style.css">
<script src="/public/common.js"></script>

{{#if fontAwesome}}
    <link rel="stylesheet" href="/cdn/fonts/font-awesome/5.5.0/css/all.css" />
    <script src="/cdn/fonts/font-awesome/5.5.0/js/all.js"></script>
{{/if}}


{{#if jQuery}}
    <script src="/cdn/js/jquery/3.3.1/jquery.slim.js" crossorigin="anonymous" ></script>
{{/if}}

{{#if bootStrap }}
<link rel="stylesheet" href="/cdn/js/bootstrap/4.1.3/css/bootstrap.min.css" crossorigin="anonymous" />
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" crossorigin="anonymous"></script> -->
<script src="/cdn/js/bootstrap/4.1.3/js/bootstrap.min.js" crossorigin="anonymous"></script>
{{/if}}

{{#if react}}
<script src="/cdn/js/ajax/libs/react-dom/16.1.1/umd/react.development.js"></script>
<script src="/cdn/js/ajax/libs/react-dom/16.1.1/umd/react-dom.development.js"></script>
<script src="/cdn/js/babel-standalone/babel.min.js"></script>
{{/if}}

{{#if redux}}
<script src="/cdn/js/ajax/libs/redux/3.7.2/redux.js"></script>
<script src="/cdn/js/ajax/libs/react-redux/5.0.6/react-redux.js"></script>
<script src="/cdn/js/ajax/libs/redux-thunk/2.2.0/redux-thunk.js"></script>
{{/if}}

{{#if marked}}
    <script src="/cdn/js/marked/marked.min.js"></script>
{{/if}}

{{#if mathjax}}
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    showProcessingMessages: false,
    tex2jax: { inlineMath: [['$','$'],['\\(','\\)']] },
    "HTML-CSS": {
      availableFonts:[], preferredFont: null, webFont: null
    } 
  });
</script>
<script type="text/javascript" src="/cdn/js/MathJax-master/MathJax.js?config=TeX-MML-AM_HTMLorMML"></script>
{{/if}}

{{#if handlebars}}
<script src="/cdn/js/handlebars/4.0.12/handlebars.min.js"></script>

<script>
  /* Register Handlebars helpers for views */
  function registerHandlebarsHelpers() {
    Handlebars.registerHelper("maleCheck", function(data) {
      let str = "";
      if (data === "male") str = "checked";
      return new Handlebars.SafeString(str);
    });
  
    Handlebars.registerHelper("femaleCheck", function(data) {
      let str = "";
      if (data === "female") str = "checked";
      return new Handlebars.SafeString(str);
    });
  
    Handlebars.registerHelper("roleCompare", function(role, compareRole) {
      let str = "";
      if (role === compareRole) str = "selected";
      return new Handlebars.SafeString(str);
    });
  
    Handlebars.registerHelper("verifiedHelper", function(verified) {
      let str = "";
      if (verified) str = "checked";
      return new Handlebars.SafeString(str);
    });
  
    Handlebars.registerHelper("iconize", function(data) {
      let str;
  
      switch (data) {
        case "male":
          str = "<i class='fas fa-male'></i>";
          break;
        case "female":
          str = "<i class='fas fa-female'></i>";
          break;
        default:
          str = "?";
      }
      return new Handlebars.SafeString(str);
    });
  }

  registerHandlebarsHelpers();

  fetch("/views/partials/navbar.hbs")
    .then(r => r.text())
    .then(text => {
      Handlebars.registerPartial("navbar", text);
    });
    
</script>
{{/if}}