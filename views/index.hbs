<!DOCTYPE html>
<html lang="en">
    <head>
        <title></title>
        {{>headerStuff fontAwesome=true jQuery=true bootStrap=true handlebars=true}}

    </head>
    <body>
        <header>
            {{>navbar mainActive="active"}}
        </header>
        <main>
            <div class="jumbotron">
                <h1 class="display-3">Norton's Adventure</h1>
                <p class="lead">Classic Plus</p>
                <hr class="my-2">
                <p>...</p>
                <p class="lead">
                    <a class="startGame btn btn-primary btn-lg" href="#" role="button">Start Level 0</a>
                </p>
            </div>
        </main>

    <script src="/cdn/threejs/build/three.js"></script>
    <script src="/cdn/threejs/examples/js/controls/PointerLockControls.js"></script>    
    <script src="/cdn/threejs/examples/js/libs/inflate.min.js"></script>
    <script src="/cdn/threejs/examples/js/loaders/GLTFLoader.js"></script>
    {{!-- <script src="/cdn/threejs/examples/js/loaders/FBXLoader.js"></script> --}}
    {{!-- <script src="/cdn/threejs/examples/js/loaders/OBJLoader.js"></script> --}}

    <!-- The Modal -->
    <div id="myModal" class="myModal">

    <!-- Modal content -->
    <div class="modal-content">
        <div class="modal-header">
            <span class="close">&times;</span>
            <h2 id="modal-title"></h2>
        </div>
        <div id="modal-body">
        </div>
        <div class="modal-footer">
            <h3></h3>
        </div>
    </div>

    </div>

    <div id="message"></div>

    </body>
    <script type="module">

       /**
        * This index module has the primary EventDepot, GameAPI, Game, and SceneController.
        * It handles events which deal with HTML user interaction like the modal display.
        */
        import { EventDepot } from '/public/eventDepot.js';
        import { Game, GameAPI } from '/game.js';
        import { SceneController } from '/scene/sceneController.js'

        var gameAPI = new GameAPI();

        // Some game details will be provided, either new or restored game
        var props = 
        localStorage.getItem('gameProps')? 
        localStorage.getItem('gameProps'): gameAPI.newGame('Dave', 20);

        var game;
        var sceneController;
        var eventDepot = new EventDepot();
        
        const addEventListeners = () => {
            eventDepot.addListener('loadLevel', (data) => {
                game.eventDepot.fire('unlockControls', {});
                sceneController.deanimateScene();

                // TODO: Update props with user and last level layout data
                props.hero = data.hero;
                props.level = data.level;
                startGame();

                {{!-- 
                game = new Game(props, eventDepot);
                game.setLevel(data.level);
                game.setGameLayout();
                sceneController = new SceneController(game.hero, game.layoutBuilder, game.eventDepot);
                sceneController.animateScene(); 
                --}}
            });


            eventDepot.addListener('showDescription', (data) => {
                let description = game.getObjectDetail(data.objectName,'description');
                document.getElementById('message').innerHTML = description;
            });

            eventDepot.addListener('hideDescription', (data) => {
                document.getElementById('message').innerHTML = '';
            });

            eventDepot.addListener('modal', (data) => {

                eventDepot.fire('unlockControls', {});
                var context;

                switch (data.type) {
                    case 'inventory': 
                        context = [];
                        Object.keys(game.hero.inventory).forEach(key => {
                            context.push({
                                name: key,
                                description: game.getObjectDetail(key,'description'),
                                quantity: game.hero.inventory[key]
                            });
                        })
                        break;
                    default:
                }
                
                loadTemplate('modal-body', data.type, context);
                
                var modal = document.getElementById('myModal');
                var closer = document.getElementsByClassName("close")[0];
                var modalTitle = document.getElementById('modal-title').innerHTML = data.title;

                modal.style.display = "block";

                function escape() {
                    modal.style.display = "none";
                    eventDepot.fire('lockControls', {});
                }

                closer.onclick = function() {
                    escape();
                }

                window.onclick = function(event) {
                    if (event.target == modal) {
                        escape();
                    }
                }
            })

            document.querySelector('.inventoryLink').addEventListener('click', e => {
                eventDepot.fire('modal', { type: 'inventory', title: 'Inventory' });
                e.preventDefault();
            })

            Array.from(document.querySelectorAll('.startGame')).forEach(el => {
                el.addEventListener('click', e => {
                    e.preventDefault();
                    startGame();
                    
                })
            })
        }
        addEventListeners();

        const startGame = () => {
            game = new Game(props, eventDepot);
            game.setGameLayout();

            game.stats(); // currently just dumps objects to console
            sceneController = new SceneController(game.hero, game.layoutBuilder, game.eventDepot);
            sceneController.animateScene();
        }

        const loadTemplate = (elementId, template, data) => {
            handleGet(`/views/${template}.hbs`, response => {
                let template = Handlebars.compile(response);
                document.getElementById(elementId).innerHTML = template(data);
            });
        }
        
    </script>

</html>