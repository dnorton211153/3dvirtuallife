<!DOCTYPE html>
<html lang="en">
    <head>
        <title></title>
        {{>headerStuff fontAwesome=true jQuery=true bootStrap=true handlebars=true}}

    </head>
    <body>
        <header>
            {{>navbar mainActive="active"}}
        </header>
        <main>
            <div class="jumbotron">
                <h1 class="display-3">Norton's Adventure</h1>
                <p class="lead">Classic Plus</p>
                <hr class="my-2">
                <p>...</p>
                <p class="lead">
                    <a class="startGame btn btn-primary btn-lg" href="#" role="button">Start Level 0</a>
                </p>
            </div>
        </main>

    <script src="/cdn/threejs/build/three.js"></script>
    <script src="/cdn/threejs/examples/js/controls/PointerLockControls.js"></script>    
    <script src="/cdn/threejs/examples/js/libs/inflate.min.js"></script>
    <script src="/cdn/threejs/examples/js/loaders/GLTFLoader.js"></script>
    {{!-- <script src="/cdn/threejs/examples/js/loaders/FBXLoader.js"></script> --}}
    {{!-- <script src="/cdn/threejs/examples/js/loaders/OBJLoader.js"></script> --}}

    <!-- The Modal -->
    <div id="myModal" class="myModal">

    <!-- Modal content -->
    <div class="modal-content">
        <div class="modal-header">
            <span class="close">&times;</span>
            <h2 id="modal-title"></h2>
        </div>
        <div id="modal-body">
        </div>
        <div class="modal-footer">
            <h3></h3>
        </div>
    </div>

    </div>


    </body>
    <script type="module">

        import { Game, GameAPI } from '/game.js';
        import { SceneController } from '/scene/sceneController.js'

        var gameAPI = new GameAPI();

        // Some game details will be provided, either new or restored game
        var props = 
        localStorage.getItem('gameProps')? 
        localStorage.getItem('gameProps'): gameAPI.newGame('Dave', 20);

        var game;
        /** When the user clicks START, it will instantiate the game and start.
        An empty layout for the given level will cause the layoutBuilder to
        generate a new layout for the scene. */

        Array.from(document.querySelectorAll('.startGame')).forEach(el => {
            el.addEventListener('click', e => {
                e.preventDefault();
                game = new Game(props);

                game.eventDepot.addListener('modal', (data) => {

                    game.eventDepot.fire('unlockControls', {});
                    var context;

                    switch (data.type) {
                        case 'inventory': 
                            context = [];
                            Object.keys(game.hero.inventory).forEach(key => {
                                context.push({
                                    name: key,
                                    description: game.getObjectDetail('item',key,'description'),
                                    quantity: game.hero.inventory[key]
                                });
                            })
                            break;
                        default:
                    }
                    
                    loadTemplate('modal-body', data.type, context);
                    
                    var modal = document.getElementById('myModal');
                    var closer = document.getElementsByClassName("close")[0];
                    var modalTitle = document.getElementById('modal-title').innerHTML = data.title;

                    modal.style.display = "block";

                    function escape() {
                        modal.style.display = "none";
                        game.eventDepot.fire('lockControls', {});
                    }

                    closer.onclick = function() {
                        escape();
                    }

                    window.onclick = function(event) {
                        if (event.target == modal) {
                            escape();
                        }
                    }
                })

                document.querySelector('.inventoryLink').addEventListener('click', e => {
                    game.eventDepot.fire('modal', { type: 'inventory', title: 'Inventory' });
                    e.preventDefault();
                })

                game.stats(); // currently just dumps objects to console
                var sceneController = new SceneController(game.layoutBuilder, game.eventDepot);
                sceneController.animateScene();
                
            })
        })

        const loadTemplate = (elementId, template, data) => {
            handleGet(`/views/${template}.hbs`, response => {
                let template = Handlebars.compile(response);
                document.getElementById(elementId).innerHTML = template(data);
            });
        }
        
    </script>

</html>